package com.dmdelivery.webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.datatype.XMLGregorianCalendar;

import com.dmdelivery.webservice.type.AddRecipientsResultType;
import com.dmdelivery.webservice.type.ArrayOfIntType;
import com.dmdelivery.webservice.type.ArrayOfStringType;
import com.dmdelivery.webservice.type.BrandArrayType;
import com.dmdelivery.webservice.type.CampaignArrayType;
import com.dmdelivery.webservice.type.DMdeliveryLoginType;
import com.dmdelivery.webservice.type.EventArrayType;
import com.dmdelivery.webservice.type.FilterArrayType;
import com.dmdelivery.webservice.type.GroupArrayType;
import com.dmdelivery.webservice.type.MailingArrayType;
import com.dmdelivery.webservice.type.MailingBounceArrayType;
import com.dmdelivery.webservice.type.MailingResponseArrayType;
import com.dmdelivery.webservice.type.MailingStatsSummaryResultType;
import com.dmdelivery.webservice.type.NewGroupType;
import com.dmdelivery.webservice.type.NewRecipientArrayType;
import com.dmdelivery.webservice.type.NewRecipientType;
import com.dmdelivery.webservice.type.RecipientArrayType;
import com.dmdelivery.webservice.type.RecipientCampaignArrayType;
import com.dmdelivery.webservice.type.RecipientFieldArrayType;
import com.dmdelivery.webservice.type.RecordResultType;
import com.dmdelivery.webservice.type.SMSMailingArrayType;
import com.dmdelivery.webservice.type.SenderAddressArrayType;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.3-hudson-390-
 * Generated source version: 2.0
 * 
 */
@WebService(name = "DMdeliverySoapAPIPort", targetNamespace = "http://dmdelivery.com/webservice/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface DMdeliverySoapAPIPort {

	/**
	 * 
	 * Check the health of DMdelivery's webservice. Specifically: check whether
	 * the webservice is available (http(s) access), and the database is up and
	 * responsive. Required credentials: none
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @returns: true, when health is okay.
	 * 
	 * 
	 * @param login
	 * @return returns boolean
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "checkHealth_result", partName = "checkHealth_result")
	public boolean checkHealth(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login);

	/**
	 * 
	 * Add a new recipient to the overall DMdelivery database. Required
	 * credentials: 'insert' privilege for area 'Overall recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignIDs
	 *            : An array of overall campaigns (database IDs) to make the
	 *            recipients a member of. Provide at least one campaign.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipient a
	 *            member of. The groups here need to be present in all campaigns
	 *            the recipient becomes a member of! Provide at least one group.
	 *            If this array *only* contains the ID of the Opt-in group (60),
	 *            the opt-in confirmation email will be sent to the recipient.
	 * @param recipientData
	 *            : An associative array (key: name of field, value: value of
	 *            field) containing recipient data.
	 * @param overwrite
	 *            : In case the recipient already exists, whether or not to
	 *            overwrite the known recipient data with the new data provided.
	 *            If set to 'false', and the recipient to be added turns out to
	 *            be duplicate, then the recipient will not be added to the
	 *            given campaigns and groups!
	 * @returns: The database ID of the newly created recipient.
	 * 
	 * 
	 * @param campaignIDs
	 * @param recipientData
	 * @param overwrite
	 * @param login
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addOverallRecipient_result", partName = "addOverallRecipient_result")
	public RecordResultType addOverallRecipient(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignIDs", partName = "campaignIDs") ArrayOfIntType campaignIDs,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "recipientData", partName = "recipientData") NewRecipientType recipientData,
			@WebParam(name = "overwrite", partName = "overwrite") boolean overwrite);

	/**
	 * 
	 * Edit the data of an existing overall recipient, enabling modifying
	 * campaign and/or group memberships. Required credentials: 'update'
	 * privilege for area 'Overall recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignIDs
	 *            : An array of overall campaigns (database IDs) to make the
	 *            recipients a member of. For campaigns this recipient was a
	 *            member of but that are not included in $campaignIDs, the
	 *            recipient will be put in the Unsubscribers group. For all
	 *            'campaignIDs' given, the recipient will be put in the
	 *            'groupIDs', while removing that recipient from the
	 *            Unsubscribe, Bounce and Spamcomplaint groups in these
	 *            campaigns. If this argument is an empty list, the recipient
	 *            will be unsubscribed from all campaigns he is a member of.
	 * @param recipientID
	 *            : The database ID of the recipient to edit. Can be found via
	 *            getRecipientsByMatch.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipient a
	 *            member of. The groups here need to be present in all campaigns
	 *            the recipient becomes a member of! Provide at least one group.
	 * @param recipientData
	 *            : An associative array (key: name of field, value: value of
	 *            field) containing updated recipient data.
	 * @returns: The database ID of the updated recipient.
	 * 
	 * 
	 * @param campaignIDs
	 * @param recipientData
	 * @param login
	 * @param groupIDs
	 * @param recipientID
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "editOverallRecipient_result", partName = "editOverallRecipient_result")
	public RecordResultType editOverallRecipient(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignIDs", partName = "campaignIDs") ArrayOfIntType campaignIDs,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "recipientData", partName = "recipientData") NewRecipientType recipientData);

	/**
	 * 
	 * Edit the data of an existing recipient. Required credentials: 'update'
	 * privilege for area 'Recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with. Use 0 to edit
	 *            an overall recipient, regardless of campain.
	 * @param recipientID
	 *            : The database ID of the recipient to edit. Can be found via
	 *            getRecipientsByMatch.
	 * @param recipientData
	 *            : An array of name/value pairs, representing updated recipient
	 *            data.
	 * @returns: The database ID of the updated recipient.
	 * 
	 * 
	 * @param campaignID
	 * @param recipientData
	 * @param login
	 * @param recipientID
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "editRecipient_result", partName = "editRecipient_result")
	public RecordResultType editRecipient(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "recipientData", partName = "recipientData") NewRecipientType recipientData);

	/**
	 * 
	 * Make an overall recipient a member of one or more groups in one or more
	 * overall campaigns. Required credentials: 'update' privilege for area
	 * 'Overall recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignIDs
	 *            : An array of overall campaigns (database IDs).
	 * @param recipientID
	 *            : The database ID of the recipient.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipient a
	 *            member of. Provide at least one group.
	 * @returns: true
	 * 
	 * 
	 * @param campaignIDs
	 * @param login
	 * @param groupIDs
	 * @param recipientID
	 * @return returns boolean
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addOverallRecipientToGroups_result", partName = "addOverallRecipientToGroups_result")
	public boolean addOverallRecipientToGroups(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignIDs", partName = "campaignIDs") ArrayOfIntType campaignIDs,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs);

	/**
	 * 
	 * Remove an overall recipient from one or more groups in one or more
	 * overall campaigns. Required credentials: 'delete' privilege for area
	 * 'Overall recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignIDs
	 *            : An array of overall campaigns (database IDs).
	 * @param recipientID
	 *            : The database ID of the recipient.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to remove the recipient
	 *            from. Provide at least one group.
	 * @returns: true
	 * 
	 * 
	 * @param campaignIDs
	 * @param login
	 * @param groupIDs
	 * @param recipientID
	 * @return returns boolean
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "removeOverallRecipientFromGroups_result", partName = "removeOverallRecipientFromGroups_result")
	public boolean removeOverallRecipientFromGroups(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignIDs", partName = "campaignIDs") ArrayOfIntType campaignIDs,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs);

	/**
	 * 
	 * Retrieve all brands from DMdelivery. Required credentials: 'export'
	 * privilege for area 'Brands'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @returns: An array of all brands in the DMdelivery environment.
	 * 
	 * 
	 * @param login
	 * @return returns com.dmdelivery.webservice.BrandArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getBrands_result", partName = "getBrands_result")
	public BrandArrayType getBrands(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login);

	/**
	 * 
	 * Retrieve all campaigns from DMdelivery. Required credentials: 'export'
	 * privilege for area 'Campaigns'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @returns: An array of all campaigns in the DMdelivery environment.
	 * 
	 * 
	 * @param login
	 * @return returns com.dmdelivery.webservice.CampaignArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getCampaigns_result", partName = "getCampaigns_result")
	public CampaignArrayType getCampaigns(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login);

	/**
	 * 
	 * Retrieve all sender addresses from DMdelivery. Required credentials:
	 * 'export' privilege for area 'Sender addresses'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @returns: An array of all sender addresses in the DMdelivery environment.
	 * 
	 * 
	 * @param login
	 * @return returns com.dmdelivery.webservice.SenderAddressArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getSenderAddresses_result", partName = "getSenderAddresses_result")
	public SenderAddressArrayType getSenderAddresses(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login);

	/**
	 * 
	 * Retrieve all campaigns an overall recipient is member of, and the groups
	 * they're member of within those campaigns. Required credentials: access to
	 * area 'Overall recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param recipientID
	 *            : The database ID of the overall recipient. Can be found via
	 *            getRecipientsByMatch.
	 * @returns: An array of campaigns (and groups) the recipient is member of.
	 * 
	 * 
	 * @param login
	 * @param recipientID
	 * @return returns com.dmdelivery.webservice.RecipientCampaignArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getOverallRecipientCampaigns_result", partName = "getOverallRecipientCampaigns_result")
	public RecipientCampaignArrayType getOverallRecipientCampaigns(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID);

	/**
	 * 
	 * Retrieve recipients that match certain criteria, including their database
	 * ID. Required credentials: 'export' privilege for area 'Recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param recipientMatchData
	 *            : An array of name/value pairs that represent criteria to
	 *            match recipients by. Ex: (('name'=>'email',
	 *            'value'=>'user@example.com'),('name'=>'firstname',
	 *            'value'=>'John')). Wildcards '*' and '?' can be used as well.
	 * @returns: An array of recipients that match the criteria.
	 * 
	 * 
	 * @param campaignID
	 * @param recipientData
	 * @param login
	 * @return returns com.dmdelivery.webservice.RecipientArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getRecipientsByMatch_result", partName = "getRecipientsByMatch_result")
	public RecipientArrayType getRecipientsByMatch(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "recipientData", partName = "recipientData") NewRecipientType recipientData);

	/**
	 * 
	 * Retrieve recipient fields for a DMdelivery campaign. Required
	 * credentials: access to area 'Define fields'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with. Use 0 to
	 *            retrieve fields in the overall database.
	 * @param lang
	 *            : The language to retrieve fields in.
	 * @returns: An array of all recipient fields defined for the campaign.
	 * 
	 * 
	 * @param campaignID
	 * @param login
	 * @param lang
	 * @return returns com.dmdelivery.webservice.RecipientFieldArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getRecipientFields_result", partName = "getRecipientFields_result")
	public RecipientFieldArrayType getRecipientFields(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "lang", partName = "lang") String lang);

	/**
	 * 
	 * Send a mailing to a single recipient. Mainly used for (un)subscribe
	 * confirmations etc. Of emails sent through this function, no statistics
	 * will be registered. Do not use this function to send many emails to many
	 * different recipients! Required credentials: access to area 'Send mailing'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to send.
	 * @param recipientID
	 *            : The database ID of the recipient to send to. Can be found
	 *            via getRecipientsByMatch.
	 * @returns: true
	 * 
	 * 
	 * @param mailingID
	 * @param campaignID
	 * @param login
	 * @param recipientID
	 * @return returns boolean
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendSingleMailing_result", partName = "sendSingleMailing_result")
	public boolean sendSingleMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID);

	/**
	 * 
	 * Send an SMS message to a single recipient. Required credentials: access
	 * to area 'Send SMS mailing'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the SMS mailing to send.
	 * @param recipientID
	 *            : The database ID of the recipient to send to. Can be found
	 *            via getRecipientsByMatch.
	 * @returns: true
	 * 
	 * 
	 * @param mailingID
	 * @param campaignID
	 * @param login
	 * @param recipientID
	 * @return returns boolean
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendSingleMailing_result", partName = "sendSingleMailing_result")
	public boolean sendSingleSMS(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID);

	/**
	 * 
	 * Bulk-send a mailing. Required credentials: access to area 'Send mailing'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to send.
	 * @param isTest
	 *            : Use true for test batch, false for definitive batch.
	 * @param resultsEmail
	 *            : The email address of the person who should receive logfile.
	 * @param groupIDs
	 *            : Array of (database IDs of) groups to send the mailing to.
	 *            Provide at least one group.
	 * @param filterID
	 *            : The database ID of the filter to use for matching
	 *            recipients. Use 0 for no filter.
	 * @param langs
	 *            : An array of languages to send the mailing to. Ex: ('en',
	 *            'nl').
	 * @param ADprefixDomains
	 *            : Optional and for China only: A comma-separated string of
	 *            domains that need an (AD) prefix. For example:
	 *            *163.com,*126.com,yeah.net,188.com.
	 * @param callbackUrl
	 *            : An (optional) url DMdelivery will call after the mailing has
	 *            been sent. You can use the following variables in this URL,
	 *            which DMdelivery will replace: - {$DMDcid} The campaign id -
	 *            {$DMDmid} The mailing id - {$nrRecipients} The number of
	 *            recipients in the batch - {$nrSent} The number of emails
	 *            actually sent
	 * @returns: status 'OK'
	 * 
	 * 
	 * @param callbackUrl
	 * @param mailingID
	 * @param resultsEmail
	 * @param campaignID
	 * @param filterID
	 * @param langs
	 * @param aDprefixDomains
	 * @param isTest
	 * @param login
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendMailing_result", partName = "sendMailing_result")
	public RecordResultType sendMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "isTest", partName = "isTest") boolean isTest,
			@WebParam(name = "resultsEmail", partName = "resultsEmail") String resultsEmail,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "filterID", partName = "filterID") int filterID,
			@WebParam(name = "langs", partName = "langs") ArrayOfStringType langs,
			@WebParam(name = "ADprefixDomains", partName = "ADprefixDomains") String aDprefixDomains,
			@WebParam(name = "callbackUrl", partName = "callbackUrl") String callbackUrl);

	/**
	 * 
	 * Send a system mail to a single recipient, optionally attaching files. The
	 * filesize of all attachments is limited to 10MB. Required credentials:
	 * access to area 'Send mailing'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to send.
	 * @param recipientID
	 *            : The database ID of the recipient to send to.
	 * @param attachments
	 *            : Comma-separated string of attachment-id's to attach to the
	 *            email. May be empty.
	 * @param extraRecipientData
	 *            : Extra recipient data that can be used in the mailing. This
	 *            data is not stored in the DMdelivery database.
	 * @returns: status 'OK'
	 * 
	 * 
	 * @param mailingID
	 * @param campaignID
	 * @param extraRecipientData
	 * @param login
	 * @param attachments
	 * @param recipientID
	 * @return returns boolean
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendSystemMail_result", partName = "sendSystemMail_result")
	public boolean sendSystemMail(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "attachments", partName = "attachments") String attachments,
			@WebParam(name = "extraRecipientData", partName = "extraRecipientData") AdditionRecipientFields extraRecipientData);

	/**
	 * 
	 * Bulk-send a mailing at a later date/time, optionally using approval
	 * procedure. Required credentials: access to area 'Send mailing'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to send.
	 * @param sendDate
	 *            : The date/time to send the mailing at, in ISO format. You can
	 *            only schedule @ :03, :18, :33, :48. Example: '2012-03-29
	 *            09:03:00'
	 * @param isTest
	 *            : Use true for test batch, false for definitive batch.
	 * @param resultsEmail
	 *            : The email address of the person who should receive logfile.
	 * @param groupIDs
	 *            : Array of (database IDs of) groups to send the mailing to.
	 *            Provide at least one group.
	 * @param filterID
	 *            : The database ID of the filter to use for matching
	 *            recipients. Use 0 for no filter.
	 * @param langs
	 *            : An array of languages to send the mailing to. Ex: ('en',
	 *            'nl').
	 * @param ADprefixDomains
	 *            : Optional and for China only: A comma-separated string of
	 *            domains that need an (AD) prefix. For example:
	 *            *163.com,*126.com,yeah.net,188.com.
	 * @param callbackUrl
	 *            : An (optional) url DMdelivery will call after the mailing has
	 *            been sent. You can use the following variables in this URL,
	 *            which DMdelivery will replace: - {$DMDcid} The campaign id -
	 *            {$DMDmid} The mailing id - {$nrRecipients} The number of
	 *            recipients in the batch - {$nrSent} The number of emails
	 *            actually sent
	 * @param approvalDMDgid
	 *            : Approval group id. Provide this argument to use approval
	 *            module.
	 * @param approvalPeriod
	 *            : How many hours to wait between approval sendout and
	 *            definitive sendout.
	 * @param approvalAck
	 *            : At least X people must approve the mailing.
	 * @param $approvalNack
	 *            : At most X people may disapprove the mailing.
	 * @returns: status 'OK'
	 * 
	 * 
	 * @param approvalGroupID
	 * @param mailingID
	 * @param campaignID
	 * @param approvalPeriod
	 * @param isTest
	 * @param aDprefixDomains
	 * @param groupIDs
	 * @param approvalAck
	 * @param sendDate
	 * @param callbackUrl
	 * @param resultsEmail
	 * @param filterID
	 * @param langs
	 * @param approvalNack
	 * @param login
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendMailing_result", partName = "sendMailing_result")
	public RecordResultType sendMailingScheduled(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "sendDate", partName = "sendDate") String sendDate,
			@WebParam(name = "isTest", partName = "isTest") boolean isTest,
			@WebParam(name = "resultsEmail", partName = "resultsEmail") String resultsEmail,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "filterID", partName = "filterID") int filterID,
			@WebParam(name = "langs", partName = "langs") ArrayOfStringType langs,
			@WebParam(name = "ADprefixDomains", partName = "ADprefixDomains") String aDprefixDomains,
			@WebParam(name = "callbackUrl", partName = "callbackUrl") String callbackUrl,
			@WebParam(name = "approvalGroupID", partName = "approvalGroupID") int approvalGroupID,
			@WebParam(name = "approvalPeriod", partName = "approvalPeriod") float approvalPeriod,
			@WebParam(name = "approvalAck", partName = "approvalAck") int approvalAck,
			@WebParam(name = "approvalNack", partName = "approvalNack") int approvalNack);

	/**
	 * 
	 * Bulk-send an SMS. Required credentials: access to area 'Send SMS mailing'
	 * When messages, after personalizing, exceed a length of 160 characters,
	 * multiple SMS's are sent.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the SMS mailing to send.
	 * @param isTest
	 *            : Use true for test batch, false for definitive batch.
	 * @param resultsEmail
	 *            : The email address of the person who should receive logfile.
	 * @param groupIDs
	 *            : Array of (database IDs of) groups to send the mailing to.
	 *            Provide at least one group.
	 * @param filterID
	 *            : The database ID of the filter to use for matching
	 *            recipients. Use 0 for no filter.
	 * @param lang
	 *            : An array of languages to send the mailing to. Ex: ('en',
	 *            'nl').
	 * @param callbackUrl
	 *            : An (optional) url DMdelivery will call after the SMS mailing
	 *            has been sent. You can use the following variables in this
	 *            URL, which DMdelivery will replace: - {$DMDcid} The campaign
	 *            id - {$DMDmid} The SMS mailing id - {$nrRecipients} The number
	 *            of recipients in the batch - {$nrSent} The number of SMS
	 *            messages actually sent
	 * @returns: status 'OK'
	 * 
	 * 
	 * @param callbackUrl
	 * @param mailingID
	 * @param resultsEmail
	 * @param campaignID
	 * @param filterID
	 * @param langs
	 * @param aDprefixDomains
	 * @param isTest
	 * @param login
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendMailing_result", partName = "sendMailing_result")
	public RecordResultType sendSMS(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "isTest", partName = "isTest") boolean isTest,
			@WebParam(name = "resultsEmail", partName = "resultsEmail") String resultsEmail,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "filterID", partName = "filterID") int filterID,
			@WebParam(name = "langs", partName = "langs") ArrayOfStringType langs,
			@WebParam(name = "ADprefixDomains", partName = "ADprefixDomains") String aDprefixDomains,
			@WebParam(name = "callbackUrl", partName = "callbackUrl") String callbackUrl);

	/**
	 * 
	 * Create a mailing from scratch, providing raw HTML. The plaintext-message
	 * is inherited from the campaign's default plaintext message. Required
	 * credentials: 'insert' privilege for area 'Mailings'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingName
	 *            : The name to store the mailing as (must be unique!).
	 * @param lang
	 *            : The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
	 * @param subject
	 *            : The default subject of the mailing. Can be overwritten in
	 *            the HTML to fetch.
	 * @param fromName
	 *            : The from name.
	 * @param senderID
	 *            : The database ID of the sender address. Use 0 for campaign's
	 *            default sender address.
	 * @param html
	 *            : The mailing's HTML.
	 * @returns: The database ID of the mailing that was created.
	 * 
	 * 
	 * @param campaignID
	 * @param subject
	 * @param senderID
	 * @param html
	 * @param login
	 * @param fromName
	 * @param mailingName
	 * @param lang
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "createMailing_result", partName = "createMailing_result")
	public RecordResultType createMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingName", partName = "mailingName") String mailingName,
			@WebParam(name = "lang", partName = "lang") String lang,
			@WebParam(name = "subject", partName = "subject") String subject,
			@WebParam(name = "fromName", partName = "fromName") String fromName,
			@WebParam(name = "senderID", partName = "senderID") int senderID,
			@WebParam(name = "html", partName = "html") String html);

	/**
	 * 
	 * Create a mailing from a URL. Required credentials: 'insert' privilege for
	 * area 'Mailings'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingName
	 *            : The name to store the mailing as (must be unique!).
	 * @param lang
	 *            : The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
	 * @param subject
	 *            : The default subject of the mailing. Can be overwritten in
	 *            the HTML to fetch.
	 * @param fromName
	 *            : The from name.
	 * @param senderID
	 *            : The database ID of the sender address. Use 0 for campaign's
	 *            default sender address.
	 * @param url
	 *            : The url where the mailing HTML (or a ZIP file) can be
	 *            fetched from.
	 * @param checkTimestamp
	 *            : Whether or not to check the HTML for a
	 *            <!--DMdeliveryTimestamp--> tag. Ignored for ZIP files.
	 * @returns: The database ID of the mailing that was created.
	 * 
	 * 
	 * @param campaignID
	 * @param subject
	 * @param senderID
	 * @param checkTimestamp
	 * @param login
	 * @param fromName
	 * @param mailingName
	 * @param lang
	 * @param url
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "slurpMailing_result", partName = "slurpMailing_result")
	public RecordResultType slurpMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingName", partName = "mailingName") String mailingName,
			@WebParam(name = "lang", partName = "lang") String lang,
			@WebParam(name = "subject", partName = "subject") String subject,
			@WebParam(name = "fromName", partName = "fromName") String fromName,
			@WebParam(name = "senderID", partName = "senderID") int senderID,
			@WebParam(name = "url", partName = "url") String url,
			@WebParam(name = "checkTimestamp", partName = "checkTimestamp") boolean checkTimestamp);

	/**
	 * 
	 * Remove a recipient from one or more groups. Required credentials:
	 * 'update' privilege for area 'Recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param recipientID
	 *            : The database ID of the recipient. Can be found via
	 *            getRecipientsByMatch.
	 * @param groupIDs
	 *            : The (database ID of) the groups to remove the recipient
	 *            from. Provide at least one group.
	 * @returns: An array of groups (database IDs) the recipient is now a member
	 *           of.
	 * 
	 * 
	 * @param campaignID
	 * @param login
	 * @param groupIDs
	 * @param recipientID
	 * @return returns com.dmdelivery.webservice.ArrayOfIntType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "removeRecipientFromGroups_result", partName = "removeRecipientFromGroups_result")
	public ArrayOfIntType removeRecipientFromGroups(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs);

	/**
	 * 
	 * Make a recipient a member of one or more groups. Required credentials:
	 * 'update' privilege for area 'Recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param recipientID
	 *            : The database ID of the recipient.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipients a
	 *            member of. Provide at least one group.
	 * @returns: An array of groups (database IDs) the recipient is now a member
	 *           of.
	 * 
	 * 
	 * @param campaignID
	 * @param login
	 * @param groupIDs
	 * @param recipientID
	 * @return returns com.dmdelivery.webservice.ArrayOfIntType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addRecipientToGroups_result", partName = "addRecipientToGroups_result")
	public ArrayOfIntType addRecipientToGroups(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs);

	/**
	 * 
	 * Move all recipients from one group to another group. Required
	 * credentials: access to area 'Groups'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param fromGroupID
	 *            : The database ID of the source group.
	 * @param toGroupID
	 *            : The database ID of the target group.
	 * @returns: The number of recipients that were moved to the target group.
	 * 
	 * 
	 * @param fromGroupID
	 * @param campaignID
	 * @param login
	 * @param toGroupID
	 * @return returns int
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "moveRecipientsToGroup_result", partName = "moveRecipientsToGroup_result")
	public int moveRecipientsToGroup(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "fromGroupID", partName = "fromGroupID") int fromGroupID,
			@WebParam(name = "toGroupID", partName = "toGroupID") int toGroupID);

	/**
	 * 
	 * Retrieve all mailings from a DMdelivery campaign. Mailings are returned
	 * from new to old (newest on top). Required credentials: 'export' privilege
	 * for area 'Mailings'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param limit
	 *            : indicates the number of mailings to retrieve. Use 0 to
	 *            retrieve *all* mailings.
	 * @param definitiveOnly
	 *            : Whether or not to only return definitively sent mailings.
	 * @returns: An array of all mailings in the campaign.
	 * 
	 * 
	 * @param limit
	 * @param definitiveOnly
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.MailingArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getMailings_result", partName = "getMailings_result")
	public MailingArrayType getMailings(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "limit", partName = "limit") int limit,
			@WebParam(name = "definitiveOnly", partName = "definitiveOnly") boolean definitiveOnly);

	/**
	 * 
	 * Retrieve all SMS mailings from a DMdelivery campaign. Mailings are
	 * returned from new to old (newest on top). Required credentials: 'export'
	 * privilege for area 'SMS mailings'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param limit
	 *            : indicates the number of SMS mailings to retrieve. Use 0 to
	 *            retrieve *all* mailings.
	 * @param definitiveOnly
	 *            : Whether or not to only return definitively sent SMS
	 *            mailings.
	 * @returns: An array of all SMS mailings in the campaign.
	 * 
	 * 
	 * @param limit
	 * @param definitiveOnly
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.SMSMailingArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getSMSMailings_result", partName = "getSMSMailings_result")
	public SMSMailingArrayType getSMSMailings(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "limit", partName = "limit") int limit,
			@WebParam(name = "definitiveOnly", partName = "definitiveOnly") boolean definitiveOnly);

	/**
	 * 
	 * Retrieve recipients from a specific DMdelivery group. Required
	 * credentials: 'export' privilege for area 'Recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param fields
	 *            : Array of fields to retrieve. Ex: ('email', 'firstname',
	 *            'lastname'). Provide at least one field.
	 * @param inGroupID
	 *            : Database ID of group the recipients should be member of.
	 * @param fromDate
	 *            : Date since when recipient became a member of 'inGroupID'.
	 *            Leave empty if it doesn't matter, otherwise use 'YYYY-MM-DD'
	 *            format.
	 * @param mailingIDs
	 *            : Array of (database IDs of) mailings the recipients must have
	 *            been sent. May be empty.
	 * @param filterID
	 *            : The database ID of the filter to use for matching
	 *            recipients. Use 0 for no filter.
	 * @returns: An array of recipients.
	 * 
	 * 
	 * @param mailingIDs
	 * @param fromDate
	 * @param campaignID
	 * @param filterID
	 * @param inGroupID
	 * @param login
	 * @param fields
	 * @return returns com.dmdelivery.webservice.RecipientArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getRecipientsFromGroup_result", partName = "getRecipientsFromGroup_result")
	public RecipientArrayType getRecipientsFromGroup(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "fields", partName = "fields") ArrayOfStringType fields,
			@WebParam(name = "inGroupID", partName = "inGroupID") int inGroupID,
			@WebParam(name = "fromDate", partName = "fromDate") XMLGregorianCalendar fromDate,
			@WebParam(name = "mailingIDs", partName = "mailingIDs") ArrayOfIntType mailingIDs,
			@WebParam(name = "filterID", partName = "filterID") int filterID);

	/**
	 * 
	 * Retrieve recipients from a DMdelivery campaign. Required credentials:
	 * 'export' privilege for area 'Recipients' Provide at least one inGroupID
	 * or mailingID (inGroupIDs and mailingIDs can't both be empty).
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param fields
	 *            : Array of fields to retrieve. Ex: ('email', 'firstname',
	 *            'lastname'). Provide at least one field.
	 * @param inGroupIDs
	 *            : Array of (database IDs of) groups the recipients should be
	 *            member of. May be empty.
	 * @param notInGroupIDs
	 *            : Array of (database IDs of) groups the recipients should
	 *            *not* be member of. May be empty.
	 * @param mailingIDs
	 *            : Array of (database IDs of) mailings the recipients must have
	 *            been sent. May be empty.
	 * @param filterID
	 *            : The database ID of the filter to use for matching
	 *            recipients. Use 0 for no filter.
	 * @returns: An array of recipients.
	 * 
	 * 
	 * @param mailingIDs
	 * @param inGroupIDs
	 * @param campaignID
	 * @param filterID
	 * @param login
	 * @param notInGroupIDs
	 * @param fields
	 * @return returns com.dmdelivery.webservice.RecipientArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getRecipients_result", partName = "getRecipients_result")
	public RecipientArrayType getRecipients(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "fields", partName = "fields") ArrayOfStringType fields,
			@WebParam(name = "inGroupIDs", partName = "inGroupIDs") ArrayOfIntType inGroupIDs,
			@WebParam(name = "notInGroupIDs", partName = "notInGroupIDs") ArrayOfIntType notInGroupIDs,
			@WebParam(name = "mailingIDs", partName = "mailingIDs") ArrayOfIntType mailingIDs,
			@WebParam(name = "filterID", partName = "filterID") int filterID);

	/**
	 * 
	 * Retrieve the groups a recipient is member of. Required credentials:
	 * 'export' privilege for area 'Groups'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param recipientID
	 *            : The database ID of the recipient. Can be found via
	 *            getRecipientsByMatch.
	 * @returns: An array with all (database IDs of) groups the recipient is now
	 *           a member of.
	 * 
	 * 
	 * @param campaignID
	 * @param login
	 * @param recipientID
	 * @return returns com.dmdelivery.webservice.ArrayOfIntType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getRecipientGroups_result", partName = "getRecipientGroups_result")
	public ArrayOfIntType getRecipientGroups(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID);

	/**
	 * 
	 * Retrieve summarized statistics for a mailing sent. Mailing must be sent
	 * in order to be able to do this. Required credentials: access to area
	 * 'Statistics'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to fetch the summary for.
	 * @returns: An array containing summary stats info (sent, bounces,
	 *           unsubscribers, opens, clicks, conversion etc).
	 * 
	 * 
	 * @param mailing
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.MailingStatsSummaryResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getMailingStatsSummary_result", partName = "getMailingStatsSummary_result")
	public MailingStatsSummaryResultType getMailingStatsSummary(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailing", partName = "mailing") int mailing);

	/**
	 * 
	 * Retrieve all groups from a DMdelivery campaign. Required credentials:
	 * 'export' privilege for area 'Groups'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @returns: An array of all groups in the campaign.
	 * 
	 * 
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.GroupArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getGroups_result", partName = "getGroups_result")
	public GroupArrayType getGroups(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID);

	/**
	 * 
	 * Retrieve the response (what recipients opened/clicked) for a mailing.
	 * Required credentials: access to area 'Statistics'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to fetch the response for.
	 * @param types
	 *            : Either 'click', 'open', 'trigger' or a combination (comma
	 *            separated), for example 'click,open' or 'click,trigger'.
	 * @param field
	 *            : The name of the recipient field to retrieve, for example
	 *            'id' or 'email'.
	 * @returns: An array containing response info (recipient_id, type
	 *           [open,click,trigger] and log_date).
	 * 
	 * 
	 * @param field
	 * @param mailingID
	 * @param campaignID
	 * @param login
	 * @param types
	 * @return returns com.dmdelivery.webservice.MailingResponseArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getMailingResponse_result", partName = "getMailingResponse_result")
	public MailingResponseArrayType getMailingResponse(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "types", partName = "types") String types,
			@WebParam(name = "field", partName = "field") String field);

	/**
	 * 
	 * Retrieve the response (what recipients opened/clicked) for a mailing.
	 * Required credentials: access to area 'Statistics'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to fetch the response for.
	 * @param types
	 *            : Either 'hard', 'soft' or a combination (comma separated),
	 *            for example 'hard,soft'.
	 * @param field
	 *            : The name of the recipient field to retrieve, for example
	 *            'id' or 'email'.
	 * @param date
	 *            : The date in the past you wish to retrieve bounces for.
	 * @returns: An array containing response info (recipient_id, type
	 *           [hard,soft] and log_date).
	 * 
	 * 
	 * @param field
	 * @param mailingID
	 * @param campaignID
	 * @param login
	 * @param date
	 * @param types
	 * @return returns com.dmdelivery.webservice.MailingBounceArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getMailingBounce_result", partName = "getMailingBounce_result")
	public MailingBounceArrayType getMailingBounce(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "types", partName = "types") String types,
			@WebParam(name = "field", partName = "field") String field,
			@WebParam(name = "date", partName = "date") XMLGregorianCalendar date);

	/**
	 * 
	 * Delete a mailing from a campaign. Required credentials: 'delete'
	 * privilege for area 'Mailings'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to delete.
	 * @returns: 'OK' or 'ERROR'
	 * 
	 * 
	 * @param mailingID
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "deleteMailing_result", partName = "deleteMailing_result")
	public RecordResultType deleteMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID);

	/**
	 * 
	 * Add a new group to this DMdelivery campaign. Required credentials:
	 * 'insert' privilege for area 'Groups'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param group
	 *            : The characteristics of the group to add.
	 * @returns: The database ID of the newly created group.
	 * 
	 * 
	 * @param campaignID
	 * @param login
	 * @param group
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addGroup_result", partName = "addGroup_result")
	public RecordResultType addGroup(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "group", partName = "group") NewGroupType group);

	/**
	 * 
	 * Flush all recipients from a recipient group, keep the group. The
	 * recipients are 'disconnected' from the group, not physically deleted.
	 * Afterwards, the group will still exist, but contains no recipients
	 * anymore. Required credentials: 'delete' privilege for area 'Groups'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param groupID
	 *            : The database ID of the group to delete.
	 * @returns: Number of recipients actually flushed.
	 * 
	 * 
	 * @param groupID
	 * @param campaignID
	 * @param login
	 * @return returns int
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "flushGroup_result", partName = "flushGroup_result")
	public int flushGroup(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "groupID", partName = "groupID") int groupID);

	/**
	 * 
	 * Flush all recipients from a recipient group, then delete the group. The
	 * recipients are 'disconnected' from the group, not physically deleted.
	 * Afterwards, the group will no longer exist. Required credentials:
	 * 'delete' privilege for area 'Groups'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param groupID
	 *            : The database ID of the group to delete.
	 * @returns: Number of groups (0 or 1) actually deleted.
	 * 
	 * 
	 * @param groupID
	 * @param campaignID
	 * @param login
	 * @return returns int
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "deleteGroup_result", partName = "deleteGroup_result")
	public int deleteGroup(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "groupID", partName = "groupID") int groupID);

	/**
	 * 
	 * Add a new recipient to a DMdelivery campaign. Required credentials:
	 * 'insert' privilege for area 'Recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipient a
	 *            member of. Provide at least one group. If this array *only*
	 *            contains the ID of the Opt-in group (60), *and* this is a
	 *            non-existing recipient, the opt-in confirmation email will be
	 *            sent to the recipient.
	 * @param recipientData
	 *            : An associative array (key: name of field, value: value of
	 *            field) containing recipient data.
	 * @param addDuplisToGroup
	 *            : Whether or not to add this recipient to the groups, when the
	 *            recipient is in the database already.
	 * @param overwrite
	 *            : In case the recipient already exists, whether or not to
	 *            overwrite the known recipient data with the new data provided.
	 * @returns: The database ID of the newly created recipient.
	 * 
	 * 
	 * @param addDuplisToGroups
	 * @param campaignID
	 * @param recipientData
	 * @param overwrite
	 * @param login
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addRecipient_result", partName = "addRecipient_result")
	public RecordResultType addRecipient(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "recipientData", partName = "recipientData") NewRecipientType recipientData,
			@WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups") boolean addDuplisToGroups,
			@WebParam(name = "overwrite", partName = "overwrite") boolean overwrite);

	/**
	 * 
	 * Upload a recipient-specific attachment to DMdelivery. The file will be
	 * scanned for viruses, and may not be larger than 5MB. Required
	 * credentials: 'insert' privilege for area 'Mailings', 'insert' privilege
	 * for area 'Recipients'.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to attach this file to.
	 * @param recipientID
	 *            : The database ID of the recipient to send this file to.
	 * @param fileName
	 *            : The name of the file.
	 * @param fileMD5
	 *            : The md5 hash of the file.
	 * @param fileData
	 *            : The actual file, base64 encoded.
	 * @returns: A unique ID (a 14-character string) for this attachment.
	 * 
	 * 
	 * @param mailingID
	 * @param fileMD5
	 * @param campaignID
	 * @param fileName
	 * @param login
	 * @param fileData
	 * @param recipientID
	 * @return returns java.lang.String
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addRecipientAttachment_result", partName = "addRecipientAttachment_result")
	public String addRecipientAttachment(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "fileName", partName = "fileName") String fileName,
			@WebParam(name = "fileMD5", partName = "fileMD5") String fileMD5,
			@WebParam(name = "fileData", partName = "fileData") String fileData);

	/**
	 * 
	 * Upload a mailing-specific attachment to DMdelivery. The file will be
	 * scanned for viruses, and may not be larger than 5MB. Required
	 * credentials: 'insert' privilege for area 'Mailings',
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to attach this file to.
	 * @param fileName
	 *            : The name of the file.
	 * @param fileMD5
	 *            : The md5 hash of the file.
	 * @param fileData
	 *            : The actual file, base64 encoded.
	 * @returns: A unique ID (a 14-character string) for this attachment.
	 * 
	 * 
	 * @param mailingID
	 * @param fileMD5
	 * @param campaignID
	 * @param fileName
	 * @param login
	 * @param fileData
	 * @return returns java.lang.String
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addMailingAttachment_result", partName = "addMailingAttachment_result")
	public String addMailingAttachment(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "fileName", partName = "fileName") String fileName,
			@WebParam(name = "fileMD5", partName = "fileMD5") String fileMD5,
			@WebParam(name = "fileData", partName = "fileData") String fileData);

	/**
	 * 
	 * Add a notification to the dashboard of DMdelivery. Required credentials:
	 * a valid user, no special privileges are required.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param title
	 *            : A string with the title of the notification.
	 * @param body
	 *            : A string with the body of the notification.
	 * @param severity
	 *            : An integer from 0 to 7, where: 0 = Emergency 1 = Alert 2 =
	 *            Critical 3 = Error 4 = Warning 5 = Notice 6 = Informational 7
	 *            = Debug
	 * @param source
	 *            : A string identifier of the notification source.
	 * @param expireDate
	 *            : A datetime string on which the notification expires.
	 * @returns: A unique ID (integer) for the new notification.
	 * 
	 * 
	 * @param body
	 * @param title
	 * @param source
	 * @param expireDate
	 * @param severity
	 * @param login
	 * @return returns int
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addNotification_result", partName = "addNotification_result")
	public int addNotification(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "title", partName = "title") String title,
			@WebParam(name = "body", partName = "body") String body,
			@WebParam(name = "severity", partName = "severity") int severity,
			@WebParam(name = "source", partName = "source") String source,
			@WebParam(name = "expireDate", partName = "expireDate") XMLGregorianCalendar expireDate);

	/**
	 * 
	 * Delete mailing-specific attachments, by ID. Required credentials:
	 * 'delete' privilege for area 'Mailings',
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to attach this file to.
	 * @param attachmentIDs
	 *            : The IDs (comma separated string) of the attachments to
	 *            delete.
	 * @returns: 'OK'
	 * 
	 * 
	 * @param attachmentIDs
	 * @param mailingID
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "deleteMailingAttachments_result", partName = "deleteMailingAttachments_result")
	public RecordResultType deleteMailingAttachments(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "attachmentIDs", partName = "attachmentIDs") String attachmentIDs);

	/**
	 * 
	 * Retrieve the ID's of all attachments available for a mailing (uploaded
	 * via addMailingAttachment). Required credentials: access to area
	 * 'Mailings'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to attach this file to.
	 * @returns: A comma-separated list of attachment-ID's (of type string).
	 * 
	 * 
	 * @param mailingID
	 * @param campaignID
	 * @param login
	 * @return returns java.lang.String
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getMailingAttachmentIDs_result", partName = "getMailingAttachmentIDs_result")
	public String getMailingAttachmentIDs(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID);

	/**
	 * 
	 * Add multiple new recipients to DMdelivery (max 1000 at once). Required
	 * credentials: 'insert' privilege for area 'Recipients'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipients a
	 *            member of. Provide at least one group.
	 * @param recipientDatas
	 *            : An array of associative arrays (key: name of field, value:
	 *            value of field) containing recipient data.
	 * @param addDuplisToGroup
	 *            : Whether or not to add this recipient to the groups, when the
	 *            recipient is in the database already.
	 * @param overwrite
	 *            : In case a recipient already exists, whether or not to
	 *            overwrite the known recipient data with the new data provided.
	 * @returns: Complex datatype, containing all successfully inserted records
	 *           (including the ID assigned by DMdelivery), duplicates and/or
	 *           errors.
	 * 
	 * 
	 * @param addDuplisToGroups
	 * @param campaignID
	 * @param overwrite
	 * @param recipientDatas
	 * @param login
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.AddRecipientsResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addRecipients_result", partName = "addRecipients_result")
	public AddRecipientsResultType addRecipients(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "recipientDatas", partName = "recipientDatas") NewRecipientArrayType recipientDatas,
			@WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups") boolean addDuplisToGroups,
			@WebParam(name = "overwrite", partName = "overwrite") boolean overwrite);

	/**
	 * 
	 * Import recipients (max 1000 at once), while sending a (definitive)
	 * mailing to them. Required credentials: 'insert' privilege for area
	 * 'Recipients' AND access to area 'Send mailing'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param mailingID
	 *            : The database ID of the mailing to send.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipients a
	 *            member of. Provide at least one group.
	 * @param recipientDatas
	 *            : An array of associative arrays (key: name of field, value:
	 *            value of field) containing recipient data.
	 * @param addDuplisToGroup
	 *            : Whether or not to add this recipient to the groups, when the
	 *            recipient is in the database already.
	 * @param overwrite
	 *            : In case a recipient already exists, whether or not to
	 *            overwrite the known recipient data with the new data provided.
	 * @returns: Complex datatype, containing all duplicates and/or errors.
	 * 
	 * 
	 * @param addDuplisToGroups
	 * @param mailingID
	 * @param campaignID
	 * @param overwrite
	 * @param recipientDatas
	 * @param login
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.AddRecipientsResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addRecipientsSendMailing_result", partName = "addRecipientsSendMailing_result")
	public AddRecipientsResultType addRecipientsSendMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "recipientDatas", partName = "recipientDatas") NewRecipientArrayType recipientDatas,
			@WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups") boolean addDuplisToGroups,
			@WebParam(name = "overwrite", partName = "overwrite") boolean overwrite);

	/**
	 * 
	 * Import recipients (max 1000 at once), while sending a (definitive) SMS to
	 * them. Required credentials: 'insert' privilege for area 'Recipients' AND
	 * access to area 'Send mailing'
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param SMSmailingID
	 *            : The database ID of the SMS mailing to send.
	 * @param groupIDs
	 *            : An array of groups (database IDs) to make the recipients a
	 *            member of. Provide at least one group.
	 * @param recipientDatas
	 *            : An array of associative arrays (key: name of field, value:
	 *            value of field) containing recipient data.
	 * @param addDuplisToGroup
	 *            : Whether or not to add this recipient to the groups, when the
	 *            recipient is in the database already.
	 * @param overwrite
	 *            : In case a recipient already exists, whether or not to
	 *            overwrite the known recipient data with the new data provided.
	 * @returns: Complex datatype, containing all duplicates and/or errors.
	 * 
	 * 
	 * @param addDuplisToGroups
	 * @param campaignID
	 * @param overwrite
	 * @param recipientDatas
	 * @param login
	 * @param smSmailingID
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.AddRecipientsResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addRecipientsSendSMS_result", partName = "addRecipientsSendSMS_result")
	public AddRecipientsResultType addRecipientsSendSMS(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "SMSmailingID", partName = "SMSmailingID") int smSmailingID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "recipientDatas", partName = "recipientDatas") NewRecipientArrayType recipientDatas,
			@WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups") boolean addDuplisToGroups,
			@WebParam(name = "overwrite", partName = "overwrite") boolean overwrite);

	/**
	 * 
	 * Import a remotely located CSV file, containing recipient info, into
	 * DMdelivery. Supports http, https, ftp, sftp, ftps and scp protocols.
	 * Required credentials: 'import' privilege for area 'Recipients' Errors and
	 * Duplicates are uploaded back to the same location the CSV was downloaded
	 * from. For example, if this is the CSV file: -
	 * ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
	 * Then errors and duplicates will be available here when the import has
	 * finished: -
	 * ftp://username:password@somewhere.server.com:80/incoming/recipients
	 * .csv.errors -
	 * ftp://username:password@somewhere.server.com:80/incoming/recipients
	 * .csv.duplis The 'callbackUrl' argument is used to let you know when the
	 * import is finished. This can be an email address: An email is sent to
	 * this address when import is finished. This can be a URL: The URL is
	 * fetched when import is finished. The URL may contain the following
	 * placeholders: {$DMDcid}, {$nrLines}, {$nrDuplicates} and {$nrErrors}
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param groupID
	 *            : The ID of the group to import the recipients into.
	 * @param csvURL
	 *            : The URL of the CSV file. Examples: -
	 *            http://username:password
	 *            @somewhere.server.com:80/recipients.csv -
	 *            ftp://username:password
	 *            @somewhere.server.com/incoming/recipients.csv -
	 *            sftp://username
	 *            :password@somewhere.server.com/root/csvs/recipients.csv
	 * @param csvCharset
	 *            : The character set of the CSV file. For example: utf-8,
	 *            iso-8859-1, gb2312
	 * @param csvFieldSep
	 *            : The field separator character used in the CSV file.
	 * @param csvEnclosure
	 *            : The enclosure character used in the CSV file.
	 * @param addDuplisToGroup
	 *            : Whether or not to add this recipient to the groups, when the
	 *            recipient is in the database already.
	 * @param overwrite
	 *            : In case a recipient already exists, whether or not to
	 *            overwrite the known recipient data with the new data provided.
	 * @param callbackUrl
	 *            : Either an email address or a URL. Will be emailed/called
	 *            when import is done.
	 * @returns: 'OK', when remote file could be found or 'ERROR' if not.
	 * 
	 * 
	 * @param addDuplisToGroups
	 * @param csvFieldSep
	 * @param callbackUrl
	 * @param groupID
	 * @param csvEnclosure
	 * @param campaignID
	 * @param overwrite
	 * @param csvCharset
	 * @param login
	 * @param csvURL
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "importRemoteCSV_result", partName = "importRemoteCSV_result")
	public RecordResultType importRemoteCSV(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "groupID", partName = "groupID") int groupID,
			@WebParam(name = "csvURL", partName = "csvURL") String csvURL,
			@WebParam(name = "csvCharset", partName = "csvCharset") String csvCharset,
			@WebParam(name = "csvFieldSep", partName = "csvFieldSep") String csvFieldSep,
			@WebParam(name = "csvEnclosure", partName = "csvEnclosure") String csvEnclosure,
			@WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups") boolean addDuplisToGroups,
			@WebParam(name = "overwrite", partName = "overwrite") boolean overwrite,
			@WebParam(name = "callbackUrl", partName = "callbackUrl") String callbackUrl);

	/**
	 * 
	 * Import a remotely located CSV file, containing recipient info, into
	 * DMdelivery. Send a mailing to this group (optionally applying
	 * filter/language) when import is finished. Supports http, https, ftp,
	 * sftp, ftps and scp protocols. Required credentials: 'import' privilege
	 * for area 'Recipients' and access to area 'Send mailing' Errors and
	 * Duplicates are uploaded back to the same location the CSV was downloaded
	 * from. For example, if this is the CSV file: -
	 * ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
	 * Then errors and duplicates will be available here when the import has
	 * finished: -
	 * ftp://username:password@somewhere.server.com:80/incoming/recipients
	 * .csv.errors -
	 * ftp://username:password@somewhere.server.com:80/incoming/recipients
	 * .csv.duplis
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param groupID
	 *            : The ID of the group to import the recipients into.
	 * @param csvURL
	 *            : The URL of the CSV file. Examples: -
	 *            http://username:password
	 *            @somewhere.server.com:80/recipients.csv -
	 *            ftp://username:password
	 *            @somewhere.server.com/incoming/recipients.csv -
	 *            sftp://username
	 *            :password@somewhere.server.com/root/csvs/recipients.csv
	 * @param csvCharset
	 *            : The character set of the CSV file. For example: utf-8,
	 *            iso-8859-1, gb2312
	 * @param csvFieldSep
	 *            : The field separator character used in the CSV file.
	 * @param csvEnclosure
	 *            : The enclosure character used in the CSV file.
	 * @param addDuplisToGroup
	 *            : Whether or not to add this recipient to the groups, when the
	 *            recipient is in the database already.
	 * @param overwrite
	 *            : In case a recipient already exists, whether or not to
	 *            overwrite the known recipient data with the new data provided.
	 * @param mailingID
	 *            : The database ID of the mailing to send.
	 * @param resultsEmail
	 *            : The email address of the person who should receive logfile.
	 * @param filterID
	 *            : The database ID of the filter to use for matching
	 *            recipients. Use 0 for no filter.
	 * @param langs
	 *            : An array of languages to send the mailing to. Ex: ('en',
	 *            'nl').
	 * @param ADprefixDomains
	 *            : Optional and for China only: A comma-separated string of
	 *            domains that need an (AD) prefix. For example:
	 *            *163.com,*126.com,yeah.net,188.com.
	 * @param callbackUrl
	 *            : An (optional) url DMdelivery will call after the mailing has
	 *            been sent. You can use the following variables in this URL,
	 *            which DMdelivery will replace: - {$DMDcid} The campaign id -
	 *            {$DMDmid} The mailing id - {$nrRecipients} The number of
	 *            recipients in the batch - {$nrSent} The number of emails
	 *            actually sent
	 * @returns: status 'OK'
	 * 
	 * 
	 * @param addDuplisToGroups
	 * @param mailingID
	 * @param campaignID
	 * @param csvEnclosure
	 * @param aDprefixDomains
	 * @param csvFieldSep
	 * @param callbackUrl
	 * @param groupID
	 * @param resultsEmail
	 * @param filterID
	 * @param overwrite
	 * @param csvCharset
	 * @param langs
	 * @param login
	 * @param csvURL
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "importRemoteCSVSendMailing_result", partName = "importRemoteCSVSendMailing_result")
	public RecordResultType importRemoteCSVSendMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "groupID", partName = "groupID") int groupID,
			@WebParam(name = "csvURL", partName = "csvURL") String csvURL,
			@WebParam(name = "csvCharset", partName = "csvCharset") String csvCharset,
			@WebParam(name = "csvFieldSep", partName = "csvFieldSep") String csvFieldSep,
			@WebParam(name = "csvEnclosure", partName = "csvEnclosure") String csvEnclosure,
			@WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups") boolean addDuplisToGroups,
			@WebParam(name = "overwrite", partName = "overwrite") boolean overwrite,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "resultsEmail", partName = "resultsEmail") String resultsEmail,
			@WebParam(name = "filterID", partName = "filterID") int filterID,
			@WebParam(name = "langs", partName = "langs") ArrayOfStringType langs,
			@WebParam(name = "ADprefixDomains", partName = "ADprefixDomains") String aDprefixDomains,
			@WebParam(name = "callbackUrl", partName = "callbackUrl") String callbackUrl);

	/**
	 * 
	 * Get all events for a specified campaign
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param eventID
	 *            : Optional eventID parameter
	 * @returns: Complex datatype, containing all duplicates and/or errors.
	 * 
	 * 
	 * @param eventID
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.EventArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getEvents_result", partName = "getEvents_result")
	public EventArrayType getEvents(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "eventID", partName = "eventID") int eventID);

	/**
	 * 
	 * Add or update an attendee for a specified event
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param eventID
	 *            : The eventID of the event the attendee should be added to.
	 * @param status
	 *            : Boolean flag to set weather the given attendee is attending
	 *            the event.
	 * @returns: Returns original attendee data with extra fields eventResponse
	 *           and eventMessage.
	 * 
	 * 
	 * @param eventID
	 * @param campaignID
	 * @param status
	 * @param recipientData
	 * @param login
	 * @return returns com.dmdelivery.webservice.NewRecipientType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "addEventAttendee_result", partName = "addEventAttendee_result")
	public NewRecipientType addEventAttendee(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "eventID", partName = "eventID") int eventID,
			@WebParam(name = "recipientData", partName = "recipientData") NewRecipientType recipientData,
			@WebParam(name = "status", partName = "status") boolean status);

	/**
	 * 
	 * Get all attendees for an event
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @param eventID
	 *            : The eventID of the event the attendee should be added to.
	 * @returns: Multidimensional array with recipient data formatted as
	 *           name/value pairs.
	 * 
	 * 
	 * @param eventID
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.NewRecipientArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getEventAttendees_result", partName = "getEventAttendees_result")
	public NewRecipientArrayType getEventAttendees(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "eventID", partName = "eventID") int eventID);

	/**
	 * 
	 * Get the filters available in a campaign.
	 * 
	 * @param login
	 *            : DMdelivery login object
	 * @param campaignID
	 *            : The database ID of the campaign to work with.
	 * @returns: Multidimensional array with filter data containing ID and name.
	 * 
	 * 
	 * @param campaignID
	 * @param login
	 * @return returns com.dmdelivery.webservice.FilterArrayType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "getFilters_result", partName = "getFilters_result")
	public FilterArrayType getFilters(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID);

	/**
	 * 
	 * Create a sender address, according to the "My own sender address"
	 * scenario. CAUTION: This function is disabled by default. Please contact
	 * Web Power to enable it.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param fromEmail
	 *            : The 'from' email address.
	 * @returns: The database ID of the newly created recipient.
	 * 
	 * 
	 * @param fromEmail
	 * @param login
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "createSenderAddress_result", partName = "createSenderAddress_result")
	public RecordResultType createSenderAddress(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "fromEmail", partName = "fromEmail") String fromEmail);

	/**
	 * 
	 * Create a new campaign. CAUTION: This function is disabled by default.
	 * Please contact Web Power to enable it.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param brandID
	 *            : The ID of the brand to link the new campaign to. Set to 0 to
	 *            don't use a brand.
	 * @param name
	 *            : The name of the new campaign.
	 * @param defaultSenderName
	 *            : The default sender name of mailings sent from this campaign.
	 * @param defaultSenderAddress
	 *            : The ID of the default sender address for this campaign.
	 * @param defaultReplyAddress
	 *            : The ID of the default reply address for this campaign. Set
	 *            to 0 to use the sender address.
	 * @param langs
	 *            : The languages for this campaign, as a comma separated list
	 *            (en,cn,nl).
	 * @param isOverall
	 *            : Whether or not this is an overall campaign.
	 * @param conversionPoints
	 *            : Comma-separated list of conversion points to define.
	 * @param localDomain
	 *            : What local domain to use. Use '' (empty string) for default.
	 * @param excludeLists
	 *            : What exclude lists to apply. Options: 'license
	 *            spamcomplaint', 'license hardbounce'. Provide a
	 *            comma-separated list.
	 * @returns: The database ID of the newly created campaign.
	 * 
	 * 
	 * @param excludeLists
	 * @param brandID
	 * @param localDomain
	 * @param name
	 * @param langs
	 * @param login
	 * @param defaultSenderName
	 * @param defaultReplyAddress
	 * @param defaultSenderAddress
	 * @param isOverall
	 * @param conversionPoints
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "createCampaign_result", partName = "createCampaign_result")
	public RecordResultType createCampaign(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "brandID", partName = "brandID") int brandID,
			@WebParam(name = "name", partName = "name") String name,
			@WebParam(name = "defaultSenderName", partName = "defaultSenderName") String defaultSenderName,
			@WebParam(name = "defaultSenderAddress", partName = "defaultSenderAddress") int defaultSenderAddress,
			@WebParam(name = "defaultReplyAddress", partName = "defaultReplyAddress") int defaultReplyAddress,
			@WebParam(name = "langs", partName = "langs") String langs,
			@WebParam(name = "isOverall", partName = "isOverall") boolean isOverall,
			@WebParam(name = "conversionPoints", partName = "conversionPoints") String conversionPoints,
			@WebParam(name = "localDomain", partName = "localDomain") String localDomain,
			@WebParam(name = "excludeLists", partName = "excludeLists") String excludeLists);

	/**
	 * 
	 * Copy the recipient fields definition from one (template) campaign into
	 * another (empty) campaign. The target campaign must not be overall, and
	 * may not contain any recipients yet. CAUTION: This function is disabled by
	 * default. Please contact Web Power to enable it.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param srcCampaignID
	 *            : The ID of the source campaign, to copy field definition
	 *            from.
	 * @param dstCampaignID
	 *            : The ID of the destination campaign, to copy the field
	 *            definition to.
	 * @returns: The database ID of the destination campaign.
	 * 
	 * 
	 * @param dstCampaignID
	 * @param login
	 * @param srcCampaignID
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "copyFieldDefinition_result", partName = "copyFieldDefinition_result")
	public RecordResultType copyFieldDefinition(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "srcCampaignID", partName = "srcCampaignID") int srcCampaignID,
			@WebParam(name = "dstCampaignID", partName = "dstCampaignID") int dstCampaignID);

	/**
	 * 
	 * Send a push message to the mobile devices running android or iOS of a
	 * single recipient. CAUTION: This function is only available if push
	 * notifications is enabled in DMdelivery.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign.
	 * @param mailingID
	 *            : The database ID of the mailing.
	 * @param recipientID
	 *            : The database ID of the recipient.
	 * @param resultsEmail
	 *            : The email address of the person who should receive logfile.
	 * @returns: status OK or Error
	 * 
	 * 
	 * @param mailingID
	 * @param resultsEmail
	 * @param campaignID
	 * @param login
	 * @param recipientID
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendSinglePush_result", partName = "sendSinglePush_result")
	public RecordResultType sendSinglePush(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "recipientID", partName = "recipientID") int recipientID,
			@WebParam(name = "resultsEmail", partName = "resultsEmail") String resultsEmail);

	/**
	 * 
	 * Send messages to mobile devices running android or iOS. CAUTION: This
	 * function is only available if push notifications is enabled in
	 * DMdelivery.
	 * 
	 * @param login
	 *            : DMdelivery login object.
	 * @param campaignID
	 *            : The database ID of the campaign.
	 * @param mailingID
	 *            : The database ID of the mailing.
	 * @param groupIDs
	 *            : The database IDs of groups to send the push mailing to.
	 *            Provide at least one group.
	 * @param excludeGroupIDs
	 *            : The database IDs of groups not to send the push mailing to.
	 * @param resultsEmail
	 *            : The email address of the person who should receive logfile.
	 * @returns: status OK or Error
	 * 
	 * 
	 * @param mailingID
	 * @param excludeGroupIDs
	 * @param resultsEmail
	 * @param campaignID
	 * @param login
	 * @param groupIDs
	 * @return returns com.dmdelivery.webservice.RecordResultType
	 */
	@WebMethod(action = "urn:DMdeliveryAction")
	@WebResult(name = "sendPushMailing_result", partName = "sendPushMailing_result")
	public RecordResultType sendPushMailing(
			@WebParam(name = "login", partName = "login") DMdeliveryLoginType login,
			@WebParam(name = "campaignID", partName = "campaignID") int campaignID,
			@WebParam(name = "mailingID", partName = "mailingID") int mailingID,
			@WebParam(name = "groupIDs", partName = "groupIDs") ArrayOfIntType groupIDs,
			@WebParam(name = "excludeGroupIDs", partName = "excludeGroupIDs") ArrayOfIntType excludeGroupIDs,
			@WebParam(name = "resultsEmail", partName = "resultsEmail") String resultsEmail);

}
